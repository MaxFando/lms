// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pubsub/pubsub.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// PublishUserCreated mocks base method.
func (m *MockPubSub) PublishUserCreated(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishUserCreated", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishUserCreated indicates an expected call of PublishUserCreated.
func (mr *MockPubSubMockRecorder) PublishUserCreated(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishUserCreated", reflect.TypeOf((*MockPubSub)(nil).PublishUserCreated), ctx, userID)
}

// PublishUserLoggedIn mocks base method.
func (m *MockPubSub) PublishUserLoggedIn(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishUserLoggedIn", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishUserLoggedIn indicates an expected call of PublishUserLoggedIn.
func (mr *MockPubSubMockRecorder) PublishUserLoggedIn(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishUserLoggedIn", reflect.TypeOf((*MockPubSub)(nil).PublishUserLoggedIn), ctx, userID)
}
