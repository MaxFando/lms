// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: draw-service/v1/draw-service.proto

package draw_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DrawService_CreateDraws_FullMethodName  = "/draw_service.v1.DrawService/CreateDraws"
	DrawService_GetDrawsList_FullMethodName = "/draw_service.v1.DrawService/GetDrawsList"
	DrawService_CancelDraw_FullMethodName   = "/draw_service.v1.DrawService/CancelDraw"
)

// DrawServiceClient is the client API for DrawService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrawServiceClient interface {
	CreateDraws(ctx context.Context, in *CreateDrawRequest, opts ...grpc.CallOption) (*DrawResponse, error)
	GetDrawsList(ctx context.Context, in *GetDrawsRequest, opts ...grpc.CallOption) (*GetDrawsResponse, error)
	CancelDraw(ctx context.Context, in *CancelDrawRequest, opts ...grpc.CallOption) (*CancelDrawResponse, error)
}

type drawServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDrawServiceClient(cc grpc.ClientConnInterface) DrawServiceClient {
	return &drawServiceClient{cc}
}

func (c *drawServiceClient) CreateDraws(ctx context.Context, in *CreateDrawRequest, opts ...grpc.CallOption) (*DrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrawResponse)
	err := c.cc.Invoke(ctx, DrawService_CreateDraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawServiceClient) GetDrawsList(ctx context.Context, in *GetDrawsRequest, opts ...grpc.CallOption) (*GetDrawsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDrawsResponse)
	err := c.cc.Invoke(ctx, DrawService_GetDrawsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawServiceClient) CancelDraw(ctx context.Context, in *CancelDrawRequest, opts ...grpc.CallOption) (*CancelDrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDrawResponse)
	err := c.cc.Invoke(ctx, DrawService_CancelDraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrawServiceServer is the server API for DrawService service.
// All implementations must embed UnimplementedDrawServiceServer
// for forward compatibility.
type DrawServiceServer interface {
	CreateDraws(context.Context, *CreateDrawRequest) (*DrawResponse, error)
	GetDrawsList(context.Context, *GetDrawsRequest) (*GetDrawsResponse, error)
	CancelDraw(context.Context, *CancelDrawRequest) (*CancelDrawResponse, error)
	mustEmbedUnimplementedDrawServiceServer()
}

// UnimplementedDrawServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDrawServiceServer struct{}

func (UnimplementedDrawServiceServer) CreateDraws(context.Context, *CreateDrawRequest) (*DrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraws not implemented")
}
func (UnimplementedDrawServiceServer) GetDrawsList(context.Context, *GetDrawsRequest) (*GetDrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrawsList not implemented")
}
func (UnimplementedDrawServiceServer) CancelDraw(context.Context, *CancelDrawRequest) (*CancelDrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDraw not implemented")
}
func (UnimplementedDrawServiceServer) mustEmbedUnimplementedDrawServiceServer() {}
func (UnimplementedDrawServiceServer) testEmbeddedByValue()                     {}

// UnsafeDrawServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrawServiceServer will
// result in compilation errors.
type UnsafeDrawServiceServer interface {
	mustEmbedUnimplementedDrawServiceServer()
}

func RegisterDrawServiceServer(s grpc.ServiceRegistrar, srv DrawServiceServer) {
	// If the following call pancis, it indicates UnimplementedDrawServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DrawService_ServiceDesc, srv)
}

func _DrawService_CreateDraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawServiceServer).CreateDraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrawService_CreateDraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawServiceServer).CreateDraws(ctx, req.(*CreateDrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrawService_GetDrawsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawServiceServer).GetDrawsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrawService_GetDrawsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawServiceServer).GetDrawsList(ctx, req.(*GetDrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrawService_CancelDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawServiceServer).CancelDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrawService_CancelDraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawServiceServer).CancelDraw(ctx, req.(*CancelDrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrawService_ServiceDesc is the grpc.ServiceDesc for DrawService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrawService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "draw_service.v1.DrawService",
	HandlerType: (*DrawServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDraws",
			Handler:    _DrawService_CreateDraws_Handler,
		},
		{
			MethodName: "GetDrawsList",
			Handler:    _DrawService_GetDrawsList_Handler,
		},
		{
			MethodName: "CancelDraw",
			Handler:    _DrawService_CancelDraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draw-service/v1/draw-service.proto",
}
